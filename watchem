#!/usr/bin/env bash

# Events that occur within this time from an initial one are ignored
ignore_secs=60  # do this to just give simple trigger of access, smb_audit will capture full details
clear='false'
verbose='false'

function usage {
    echo "Run a given command every time filesystem access is detected."
    echo ""
    echo "Usage: $(basename $0) [OPTIONS] COMMAND"
    echo ""
    echo "  -c, --clear     Clear the screen before each execution of COMMAND."
    echo "  -v, --verbose   Print the name of the files that changed to cause"
    echo "                  each execution of COMMAND."
    echo "  -h, --help      Display this help and exit."
    echo ""
    echo "Run the given COMMAND, and then every time filesystem accesses are"
    echo "detected in or below the current directory, run COMMAND again."
    echo "Changes within $ignore_secs seconds are grouped into one."
    echo ""
    echo "COMMAND can only be a simple command, ie. \"executable arg arg...\"."
    echo "For compound commands, use:"
    echo ""
    echo "    watchem bash -c \"ls -l | grep ^d\""
    echo ""
    echo "COMMAND can't be a shell alias, and I don't understand why not."
}

while [ $# -gt 0 ]; do
    case "$1" in
      -c|--clear) clear='true';;
      -v|--verbose) verbose='true' ;;
      -h|--help) usage; exit;;
      *) break;;
    esac
    shift
done

function execute() {
    if [ $clear = "true" ]; then
        clear
    fi
    if [ $verbose = "true" ]; then
        if [ -n "$accesses" ]; then
            echo -e "Accessed: $(echo -e $accesses | cut -d' ' -f2 | sort -u | tr '\n' ' ')"
            accesses=""
        fi
        echo "$@"
    fi
    "$@"
}

execute "$@"
ignore_until=$(date +%s.%N)

inotifywait --quiet --recursive --monitor --format "%e %w%f" \
    --event access --exclude '__pycache__' --exclude '.cache' \
    . | while read accessed
do

    accesses="$accesses\n$accessed"

    if [ $(echo "$(date +%s.%N) > $ignore_until" | bc) -eq 1 ] ; then
        ignore_until=$(echo "$(date +%s.%N) + $ignore_secs" | bc)
        ( sleep $ignore_secs ; execute "$@" ) &
    fi

done

